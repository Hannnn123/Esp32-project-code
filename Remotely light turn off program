    /* *****************************************************************
   *
   * Download latest Blinker library here:
   * https://github.com/blinker-iot/blinker-library/archive/master.zip
   * 
   * 
   * Blinker is a cross-hardware, cross-platform solution for the IoT. 
   * It provides APP, device and server support, 
   * and uses public cloud services for data transmission and storage.
   * It can be used in smart home, data monitoring and other fields 
 * to help users build Internet of Things projects better and faster.
 * 
 * Make sure installed 2.7.4 or later ESP8266/Arduino package,
 * if use ESP8266 with Blinker.
 * https://github.com/esp8266/Arduino/releases
 * 
 * Make sure installed 1.0.5 or later ESP32/Arduino package,
 * if use ESP32 with Blinker.
 * https://github.com/espressif/arduino-esp32/releases
 * 
 * Docs: https://diandeng.tech/doc
 *       
 * 
 * *****************************************************************/
#include <ESP32Servo.h> 

#define BLINKER_WIFI
#define SERVO_1 15

Servo servoN1;
Servo servo1;

#include <Blinker.h>

char auth[] = "********";
char ssid[] = "********";
char pswd[] = "********"; // obtain from the blinker

int servo1Pos = 90;

// New component object
BlinkerButton Button1("btn-abc");
BlinkerNumber Number1("num-abc");

int counter = 0;

// Press the button to execute the function
void button1_callback(const String & state)
{
    BLINKER_LOG("get button state: ", state);
    //digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
    if(servo1Pos < 90) {
    servo1Pos = 150;
    servo1.write(servo1Pos);
    delay(500);
    }
    else{
    servo1Pos = 30;
    servo1.write(servo1Pos);
    delay(500);
    }
    Serial.print(servo1Pos);
}

// If an unbound component is fired, its contents are executed
void dataRead(const String & data)
{
    BLINKER_LOG("Blinker readString: ", data);
    counter++;
    Number1.print(counter);
}

void setup()
{
    // initialize serial port
    Serial.begin(115200);
    BLINKER_DEBUG.stream(Serial);
    BLINKER_DEBUG.debugAll();

    // initialize blinker
    Blinker.begin(auth, ssid, pswd);
    Blinker.attachData(dataRead);

    Button1.attach(button1_callback);
    servo1.setPeriodHertz(50); // standard 50 hz servo
    servo1.attach(SERVO_1, 1000, 2000);
    servo1.write(servo1Pos);
    delay(1000);
}

void loop() {
    Blinker.run();
}
